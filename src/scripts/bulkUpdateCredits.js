const mongoose = require('mongoose');
const User = require('../models/User');
require('dotenv').config();

async function bulkUpdateCredits() {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log('‚úÖ Conectado ao MongoDB\n');

    // ============================================
    // EXEMPLOS DE ATUALIZA√á√ÉO EM MASSA
    // ============================================

    console.log('üìã Escolha uma op√ß√£o:\n');
    console.log('1. Adicionar cr√©ditos a todos os usu√°rios');
    console.log('2. Definir cr√©ditos espec√≠ficos para todos');
    console.log('3. Atualizar usu√°rios por plano');
    console.log('4. Adicionar cr√©ditos aos usu√°rios com cr√©ditos baixos\n');

    // ============================================
    // OP√á√ÉO 1: Adicionar cr√©ditos a todos
    // ============================================
    const addToAll = async (credits) => {
      const result = await User.updateMany(
        {}, // Todos os usu√°rios
        { $inc: { credits: credits } }
      );
      console.log(`‚úÖ ${result.modifiedCount} usu√°rios atualizados`);
      console.log(`   Adicionados ${credits} cr√©ditos a cada um\n`);
    };

    // ============================================
    // OP√á√ÉO 2: Definir cr√©ditos espec√≠ficos para todos
    // ============================================
    const setForAll = async (credits) => {
      const result = await User.updateMany(
        {}, // Todos os usu√°rios
        { $set: { credits: credits } }
      );
      console.log(`‚úÖ ${result.modifiedCount} usu√°rios atualizados`);
      console.log(`   Todos agora t√™m ${credits} cr√©ditos\n`);
    };

    // ============================================
    // OP√á√ÉO 3: Atualizar por plano
    // ============================================
    const updateByPlan = async (plan, credits) => {
      const result = await User.updateMany(
        { plan: plan }, // Usu√°rios do plano espec√≠fico
        { $set: { credits: credits } }
      );
      console.log(`‚úÖ ${result.modifiedCount} usu√°rios do plano "${plan}" atualizados`);
      console.log(`   Todos agora t√™m ${credits} cr√©ditos\n`);
    };

    // ============================================
    // OP√á√ÉO 4: Adicionar cr√©ditos a usu√°rios com cr√©ditos baixos
    // ============================================
    const updateLowCredits = async (threshold, creditsToAdd) => {
      const result = await User.updateMany(
        { credits: { $lt: threshold } }, // Cr√©ditos menores que threshold
        { $inc: { credits: creditsToAdd } }
      );
      console.log(`‚úÖ ${result.modifiedCount} usu√°rios com menos de ${threshold} cr√©ditos atualizados`);
      console.log(`   Adicionados ${creditsToAdd} cr√©ditos a cada um\n`);
    };

    // ============================================
    // ATUALIZA√á√ÉO POR EMAIL (Lista)
    // ============================================
    const updateByEmails = async (emails, credits) => {
      const result = await User.updateMany(
        { email: { $in: emails } }, // Lista de emails
        { $set: { credits: credits } }
      );
      console.log(`‚úÖ ${result.modifiedCount} usu√°rios atualizados da lista`);
      console.log(`   Todos agora t√™m ${credits} cr√©ditos\n`);
    };

    // ============================================
    // EXECUTE A OPERA√á√ÉO DESEJADA AQUI
    // ============================================

    // EXEMPLO 1: Adicionar 1000 cr√©ditos a todos
    // await addToAll(1000);

    // EXEMPLO 2: Definir 5000 cr√©ditos para todos
    // await setForAll(5000);

    // EXEMPLO 3: Atualizar usu√°rios do plano 'basic'
    // await updateByPlan('basic', 1000);

    // EXEMPLO 4: Adicionar 500 cr√©ditos a quem tem menos de 100
    // await updateLowCredits(100, 500);

    // EXEMPLO 5: Atualizar lista espec√≠fica de emails
    // await updateByEmails(['user1@email.com', 'user2@email.com'], 3000);

    // EXEMPLO 6: Listar usu√°rios antes de atualizar
    console.log('üìã Usu√°rios atuais:\n');
    const users = await User.find({}).select('name email credits plan');
    users.forEach(user => {
      console.log(`   ${user.name} (${user.email}): ${user.credits} cr√©ditos - Plano: ${user.plan}`);
    });
    console.log('');

    // DESCOMENTE A LINHA ABAIXO E ESCOLHA UMA DAS OP√á√ïES ACIMA
    console.log('‚ö†Ô∏è  Nenhuma atualiza√ß√£o foi executada. Descomente uma das op√ß√µes acima no script.');

    process.exit(0);
  } catch (error) {
    console.error('‚ùå Erro:', error);
    process.exit(1);
  }
}

bulkUpdateCredits();
